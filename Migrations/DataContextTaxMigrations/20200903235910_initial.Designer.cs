// <auto-generated />
using System;
using Auth.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Auth.Migrations.DataContextTaxMigrations
{
    [DbContext(typeof(DataContextTax))]
    [Migration("20200903235910_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("Auth.Model.Rates", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ratezip")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ratezip");

                    b.ToTable("rates");
                });

            modelBuilder.Entity("Auth.Model.SummayRates", b =>
                {
                    b.Property<Guid>("SummaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("average_rateAveRateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .HasColumnType("TEXT");

                    b.Property<string>("country_code")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("minimum_rateminRateId")
                        .HasColumnType("TEXT");

                    b.Property<string>("region")
                        .HasColumnType("TEXT");

                    b.Property<string>("region_code")
                        .HasColumnType("TEXT");

                    b.HasKey("SummaryId");

                    b.HasIndex("average_rateAveRateId");

                    b.HasIndex("minimum_rateminRateId");

                    b.ToTable("summaryRate");
                });

            modelBuilder.Entity("Auth.Model.SummayRates+AverageRate", b =>
                {
                    b.Property<Guid>("AveRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("label")
                        .HasColumnType("TEXT");

                    b.Property<double>("rate")
                        .HasColumnType("REAL");

                    b.HasKey("AveRateId");

                    b.ToTable("AverageRate");
                });

            modelBuilder.Entity("Auth.Model.SummayRates+MinimumRate", b =>
                {
                    b.Property<Guid>("minRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("label")
                        .HasColumnType("TEXT");

                    b.Property<double>("rate")
                        .HasColumnType("REAL");

                    b.HasKey("minRateId");

                    b.ToTable("MinimumRate");
                });

            modelBuilder.Entity("Auth.Model.TaxItemEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustmerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndpointUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zip")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("taxItem");
                });

            modelBuilder.Entity("Auth.Model.rate", b =>
                {
                    b.Property<string>("zip")
                        .HasColumnType("TEXT");

                    b.Property<string>("city")
                        .HasColumnType("TEXT");

                    b.Property<string>("city_rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("combined_district_rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("combined_rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("country")
                        .HasColumnType("TEXT");

                    b.Property<string>("country_rate")
                        .HasColumnType("TEXT");

                    b.Property<string>("county")
                        .HasColumnType("TEXT");

                    b.Property<string>("county_rate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("freight_taxable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("state")
                        .HasColumnType("TEXT");

                    b.Property<string>("state_rate")
                        .HasColumnType("TEXT");

                    b.HasKey("zip");

                    b.ToTable("rate");
                });

            modelBuilder.Entity("Auth.Model.Rates", b =>
                {
                    b.HasOne("Auth.Model.rate", "rate")
                        .WithMany()
                        .HasForeignKey("ratezip");
                });

            modelBuilder.Entity("Auth.Model.SummayRates", b =>
                {
                    b.HasOne("Auth.Model.SummayRates+AverageRate", "average_rate")
                        .WithMany()
                        .HasForeignKey("average_rateAveRateId");

                    b.HasOne("Auth.Model.SummayRates+MinimumRate", "minimum_rate")
                        .WithMany()
                        .HasForeignKey("minimum_rateminRateId");
                });
#pragma warning restore 612, 618
        }
    }
}
